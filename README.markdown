# Explo CSS Helper

This is a Ruby module, which you can include in your rendering methods, to return the appropriate CSS class definitions for a given HTML element.

In practice, you'll mostly use this inline in ERB code eg:

    #in index.html.erb
    <h1 class="<%= xc('h1') %>">Properly Formatted Header!</h1>
    ...etc


# Usage

The idea is that we already have [a styleguide](http://styleguide.lab.explo.org), and we've already done the hard work of making [web components that look right](http://styleguide.lab.explo.org/components) for EXPLO sites. So why reinvent the wheel on your site? Just pop the appropriate CSS class definitions on your HTML element, and be on your way!

This library gives you two main methods that you'll want to invoke: `xc()` (eXplo Class) and `xs()` (eXplo Style). Both methods take a `tag` parameter, e.g. the kind of object you want to create (`btn` or `label`, for instance). Both methods also take two optional parameters: `add: []`, and/or `replace: {}`.

You would use `add: []` when you want to add CSS to the default values generated by the helper. `add` always takes an array of string values that you want to add. For example:

    # this will add the "mt5" and "pa4" class to an otherwise normal EXPLO H1 header 
    <h1 class="<%= xc('h1', add: ['mt5', 'pa4']) %>">Properly Formatted Header!</h1>

Sometimes, the default generated CSS isn't quite right, but you only need to replace one or two classes to get it to work. `replace` requires a hash of string => string mappings. For example:

    # Replace the pale green background on a flash notice with a pale purple one
    <div class="<%= xc('flash-notice', replace: {'x-bg-palegreen' => 'x-bg-palepurple'}) %>">Purple background flash div</div>

For a complete list of all available class tags and select values, it's best to check `lib/explo_css_helper.rb`.



# Installation

In general, you'll want to add the following line to your `Gemfile`:

    gem 'explo_css_helper', git: 'git@bitbucket.org:explo/explo-css-helper.git'

(If your computer doesn't have read access to that URL, you'll need add your SSH key to this repo).

You also definitely want to have the [Tachyons](https://tachyons.io) CSS files available in your HTML, otherwise none of the CSS helper styles will work correctly.


## Using with Rails

Typically, you just `include` this module in your `ApplicationHelper` in Rails:

    module ApplicationHelper
      include ExploCssHelper
      #... the rest of your application helper code
    end


To grab the latest Explo CSS+Tachyons files, you can use this rake task:

    namespace 'css' do
      desc "Get latest CSS from Explo CDN"
      task :fetch_latest do
        css_dir = Rails.root.join('app', 'assets', 'stylesheets', 'cdn')
        %w{explo explo_color explo_typography tachyons}.each do |file|
          system "cd '#{css_dir}' && curl http://cdn.lab.explo.org/css/#{file}.css -O"
        end
        main_css = File.read "#{css_dir}/explo.css"
        File.open "#{css_dir}/explo.css", "w" do |f|
          main_css.split("\n").each do |line|
            unless line.match(/@import/)
              f.puts line.gsub(".min.css", ".css")
            end
          end
        end 
      end
    end
    


## Using with Sinatra

At the top of your Sinatra file, just:

    require 'explo_css_helper'

Inside of your main Sinatra CSS class:

    class MySweetSinatraApp < Sinatra::Base
      include ExploCssHelper
      ...
    end



# Development

If you want to edit this gem, you'll need to fetch the latest styles to your locally-cloned copy of the repo by running `rake fetch_styles`. This will download the latest style information from our [centralized list of css styles and classes](https://bitbucket.org/snippets/explo/EM6eA). `rake build` will always pre-run `rake fetch_latest` just to be on the safe side.
